#!/usr/bin/env python
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
import tornado.ioloop
import tornado.web
import tornado.log
import os.path
import json
import uuid
import subprocess
import traceback
import argparse
import logging
import stat
from tornado import template
import atexit

import igm.ui
from igm.ui.config_parse import save_cfg, schema
from igm.ui.communication import history, igm_is_running, kill_igm, readlog, get_structure, save_metadata
from igm.ui.navigation import list_directory
from igm.ui.folders_database import folder_info, register_folder, unregister_folder

template_dir = os.path.join( os.path.dirname( os.path.abspath(igm.ui.__file__) ),  'templates' )
loader = template.Loader(template_dir)

cwd = None

def render(template, data):
    return loader.load(template).generate(**data)

class BaseHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        return self.get_secure_cookie("user")

class AjaxHandler(BaseHandler):
    def post(self):

        global cwd

        if not self.current_user:
            return

        reqdata = json.loads(self.get_argument('data'))


        if reqdata['request'] == 'get_tree':
            self.write(
                { root.replace(cwd, '') : {'dirs': dirs, 'files': files}
                for root, dirs, files in os.walk(cwd) }
            )
        if reqdata['request'] == 'save_cfg':
            try:
                r = save_cfg(reqdata['cfgdata'], cwd)
                self.write(json.dumps(r))
            except:
                self.write({'status': 'failed', 'reason': traceback.format_exc()})

        if reqdata['request'] == 'get_cfg':
            try:
                cfgf = os.path.join(cwd, 'igm-config.json')
                current_cfg = json.load(open(cfgf))
            except:
                current_cfg = None;
            self.write(json.dumps(current_cfg))

        if reqdata['request'] == 'get_log':
            try:
                log = readlog(cwd)
            except:
                log = None;
            self.write(json.dumps({'log' : log}))

        if reqdata['request'] == 'is_running':
            try:
                status = igm_is_running(cwd)
            except:
                status = 'fail';
            self.write(json.dumps({'status' : status}))

        if reqdata['request'] == 'get_history':
            try:
                h = history(cwd)
            except:
                h = []
            self.write(json.dumps({'history' : h}))

        if reqdata['request'] == 'start_pipeline':
            try:
                if igm_is_running(cwd) == 'yes':
                    raise RuntimeError('IGM is already running')
                import subprocess
                subprocess.Popen(['nohup igm-run igm-config.json > igm-log.txt 2>&1 < /dev/null &'], shell=True)
                out = 'ok'
            except:
                out = traceback.format_exc()
            self.write(json.dumps({'status' : out}))

        if reqdata['request'] == 'kill_pipeline':
            try:
                kill_igm(cwd)
                out = 'ok'
            except:
                out = traceback.format_exc()
            self.write(json.dumps({'status' : out}))

        if reqdata['request'] == 'get_structure':
            try:
                r = get_structure(reqdata['path'], reqdata['n'], cwd)
                self.write(json.dumps(r))
            except:
                self.write({'status': 'failed', 'reason': traceback.format_exc()})

        if reqdata['request'] == 'listhss':
            try:
                r = list_directory(reqdata['path'], root=cwd)
                self.write(json.dumps(r))
            except:
                self.write({'status': 'failed', 'reason': traceback.format_exc()})

        if reqdata['request'] == 'igm_folders':
            try:
                r = folder_info()
                self.write(json.dumps({'status': 'ok', 'folders': r, 'current': cwd}))
            except:
                self.write({'status': 'failed', 'reason': traceback.format_exc()})

        if reqdata['request'] == 'save_metadata':
            try:
                save_metadata(reqdata['metadata'], cwd)
                self.write(json.dumps({'status': 'ok', 'folder': cwd}))
            except:
                self.write({'status': 'failed', 'reason': traceback.format_exc()})

        if reqdata['request'] == 'chdir':
            try:
                info = folder_info()
                folders = { i['folder'] for i in info }
                if reqdata['path'] in folders:
                    cwd = reqdata['path']
                    os.chdir(cwd)
                    try:
                        cfgf = os.path.join(cwd, 'igm-config.json')
                        current_cfg = json.load(open(cfgf))
                    except:
                        current_cfg = None;
                    self.write({'status': 'ok', 'path': reqdata['path'], 'current_cfg': current_cfg})
            except:
                self.write({'status': 'failed', 'reason': traceback.format_exc()})


class MainHandler(BaseHandler):

    def get(self):
        if not self.current_user:
            if self.get_argument("q", '') == token:
                self.set_secure_cookie("user", self.get_argument("q"))
            else:
                self.redirect("/login")
                return

        if os.path.isfile('igm-config.json'):
            current_cfg = json.load(open('igm-config.json'))
        else:
            current_cfg = 'undefined';

        self.render( 'main.html',
            schema=json.dumps(schema),
            current_cfg=json.dumps(current_cfg),
            root_directory=cwd,
        )


class LoginHandler(BaseHandler):
    def get(self):
        self.write('<html><body><form action="/login" method="post">'
                   'Secure token: <input type="text" name="name">'
                   '<input type="submit" value="Sign in">'
                   '</form></body></html>')

    def post(self):
        if self.get_argument("name") == token:
            self.set_secure_cookie("user", self.get_argument("name"))
        self.redirect("/")

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Run an IGM control server')
    parser.add_argument('-p', '--port', type=int, default=43254, help='Use this port for connecting to the server' )
    parser.add_argument('-t', '--tunnel', type=str, help='[user@]login-node: Try to create a ssh tunnel to an accessible node.')
    parser.add_argument('--temporary-tokens', action='store_true', help='Do not try to read or save tokens to disk. Default location is $HOME/.igm/server-cfg.json')
    parser.add_argument('dir', nargs='?', default=os.getcwd(), help='Optional. Directory where to run the IGM instance. If does not exist, it tries to create it.')

    #ssh -f -N -T -M -S <path-to-socket> -R <post>:<host>:<port> <server>

    args = parser.parse_args()

    if not os.path.isdir(args.dir):
        os.makedirs(args.dir)

    os.chdir(args.dir)
    cwd = args.dir

    # create a tunnel if requested
    if args.tunnel is not None:
        print ('##### Estabilishing a SSH tunnel #####')
        sock_path = '.ssh.sock.%C'
        tunnel_cmd = 'ssh -f -N -M -S %s -R %d:localhost:%d %s' % (
            sock_path, args.port, args.port, args.tunnel
        )
        print ('$', tunnel_cmd)
        r = os.system(tunnel_cmd)
        if r != 0:
            raise RuntimeError('Unable to create tunnel. Exiting.')
        print ('##### SSH tunnel open #####')
        close_cmd = 'ssh -S %s -O exit %s' % (sock_path, args.tunnel)
        atexit.register(os.system, close_cmd)

    # create/read a secure token

    token = str(uuid.uuid4()).replace('-', '')
    secret = str(uuid.uuid4()).replace('-', '')
    print('##### Securing server #####')
    if not args.temporary_tokens:
        secure_file = os.environ['HOME'] + '/.igm/server-cfg.json'
        try:
            # tries to load the file
            v = json.load(open(secure_file, 'r'))
            token = v['secure_token']
            secret = v['server_secret']
            print('Reading secure tokens from %s' % secure_file)
        except ( FileNotFoundError, json.decoder.JSONDecodeError,
                 KeyError ):
            try:
                if not os.path.isdir(os.environ['HOME'] + '/.igm'):
                    os.makedirs(os.environ['HOME'] + '/.igm')
                json.dump({
                    'secure_token' : token,
                    'server_secret' : secret
                }, open(secure_file, 'w'), indent=4)
                os.chmod(secure_file, stat.S_IRUSR)
                print('Secure tokens have been saved to %s' % secure_file)
            except PermissionError:
                warnings.warn('Cannot access or write %s' % secure_file)
    print()


    # silence tornado access logger
    tornado.log.access_log.setLevel(logging.ERROR)

    settings = {
        "static_path": os.path.join(os.path.dirname(igm.ui.__file__), "static"),
        "cookie_secret": secret,
        "login_url": "/login",
        "xsrf_cookies": False,
        "template_path" : template_dir,
        #"debug" : True,
        "gzip" : True,
    }

    application = tornado.web.Application([
        (r"/", MainHandler),
        (r"/login", LoginHandler),
        (r"/ajax/", AjaxHandler),

    ], **settings)

    try:
        ips = subprocess.check_output(['hostname', '-I']).decode('utf-8').strip().split()
    except:
        ips = []

    print('######################')
    print('##### IGM Server #####')
    print('######################\n')



    print('The way to connect to the server depends on your platform.')
    print('The list of ips for this machine is: \n', ips, '\n')

    if args.tunnel:
        print ('A tunnel has been estabilished. To access the server you need to connect to:')
        print ('     %s:%d' % (args.tunnel, args.port))
        print ('If you are not working directly on %s, you may want to create a tunnel from your workstation to it with:' % args.tunnel )
        print ('    ssh -N -T -L %d:localhost:%d %s' % (args.port, args.port, args.tunnel))
        print ('then point your browser to')
        print ('    localhost:%d/?q=%s' % (args.port, token) )

    elif len(ips):
        print('If the machine running igm-server is accessible from your workstation, my educated guess is to try to copy and paste the following address in your browser:')
        print('     ', ips[-1] + ':' + str(args.port) + '?q=' + token)
        print('If the machine is not accessible from your workstation you may need to set up a tunnel (with --tunnel option) to a node which is accessible from your workstation (for example a login node)')

    print()
    print('The secure token for this session is:', token)

    print ('##### IGM server starting #####')

    application.listen(args.port)
    tornado.ioloop.IOLoop.current().start()











